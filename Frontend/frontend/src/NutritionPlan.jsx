import React, { useState } from "react";
import axios from "axios";

function NutritionPlanAI() {
    const [weight, setWeight] = useState("");
    const [height, setHeight] = useState("");
    const [age, setAge] = useState("");
    const [gender, setGender] = useState("male");
    const [goal, setGoal] = useState("Maintain Weight");
    const [aiPlan, setAiPlan] = useState([]);
    const [loading, setLoading] = useState(false);

    const mealList = [
        {
            food: "1 tablespoon of honey (21g)",
            calories: 64,
            carbs: 17,
            protein: 0.1,
            fat: 0
        },
        {
          food: "bread",
          calories: 100,
          carbs: 17,
          protein: 0.1,
          fat: 0
      }
    ];

    const handleGeneratePlan = async (e) => {
        e.preventDefault();

        if (!weight || !height || !age) {
            alert("Please fill in all fields");
            return;
        }

        setLoading(true);
        setAiPlan([]);

        const token = localStorage.getItem("token");

        try {
            const metabolismResponse = await axios.get("http://localhost:5029/api/profile/GetMetabolismInfo", 
            {
              headers: {Authorization: `Bearer ${token}`}
            });

            const { bmr, tdee, calculatedAt } = metabolismResponse.data;

            // 2. Yapay zeka iÃ§in prompt oluÅŸtur
            const prompt = `
              Benim iÃ§in bir Sabah kahvaltÄ±sÄ± planÄ± hazÄ±rla. Bilgilerim ÅŸunlar:
              - YaÅŸ: ${age}
              - Boy: ${height} cm
              - Kilo: ${weight} kg
              - Cinsiyet: ${gender === "male" ? "Erkek" : "KadÄ±n"}
              - Hedef: ${goal}
              - Bazal metabolizma hÄ±zÄ± (BMR): ${bmr}
              - Toplam gÃ¼nlÃ¼k enerji harcamasÄ± (TDEE): ${tdee}

              LÃ¼tfen sadece sabah Ã¶ÄŸÃ¼nÃ¼nÃ¼ ve bu Ã¶ÄŸÃ¼nlerin iÃ§eriklerini belirt. Beslenme planÄ±nÄ± sadece Ã¶ÄŸÃ¼nlerin ve iÃ§eriklerinin listesi olarak ver ve aÃ§Ä±klamalardan kaÃ§Ä±n.
              Javascript listesi ÅŸeklinde ver cevabÄ± baÅŸka hiÃ§bir ÅŸey yazma. Listede yiyecek adÄ±, adeti, kalorisi ve deÄŸerleri olsun. Eksik yazma listeyi tamamla.

              Listeyi ÅŸu ÅŸekilde ver (Ã¶rnek format):
              [
                  {
                      "food": "Ã¶rnek yiyecek",
                      "calories": Ã¶rnek kalori,
                      "carbs": Ã¶rnek kalori,
                      "protein": Ã¶rnek kalori,
                      "fat": Ã¶rnek kalori
                  },
                  {
                      "food": "bread",
                      "calories": 100,
                      "carbs": 17,
                      "protein": 0.1,
                      "fat": 0
                  }
              ]
              Bu liste yapÄ±sÄ±na birebir uysun, hiÃ§bir ÅŸey deÄŸiÅŸtirme.Sadece Ã¶rnek yazan yerlere bir ÅŸeyler ekle liste yapÄ±sÄ±nÄ± asla deÄŸiÅŸtirme
              `;


            // 3. OpenAI veya baÅŸka bir yapay zeka API'ye isteÄŸi gÃ¶nder
            const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
              method: "POST",
              headers: {
                "Authorization": `Bearer your api key`,
                "HTTP-Referer": "http://localhost:5173",
                "X-Title": "My Workout App",
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                model: "deepseek/deepseek-r1-zero:free",
                messages: [{ role: "user", content: prompt }],
              }),
            });

            const aiResponse = await response.json();
            console.log("AI Response:", aiResponse);

            const aiMessage = aiResponse.choices?.[0]?.message?.content || "Yapay zeka yanÄ±tÄ± alÄ±namadÄ±.";
            const matches = aiMessage.match(/\[([^\]]+)\]/g);
            
            if (matches) {
                const cleanedMatches = matches.map(match => match.replace(/[\[\]\\]/g, "").trim());
            
                const parsedPlan = cleanedMatches.map(item => {
                    if (typeof item === "string" && item.includes(", ")) {
                        const [food, calories, carbs, protein, fat] = item.split(", ");
                        
                        return {
                            food: food.trim(),
                            calories: parseFloat(calories.split(":")[1]),
                            carbs: parseFloat(carbs.split(":")[1]),
                            protein: parseFloat(protein.split(":")[1]),
                            fat: parseFloat(fat.split(":")[1]),
                        };
                    } else {
                        // item geÃ§ersizse boÅŸ bir nesne dÃ¶ndÃ¼r veya bu Ã¶ÄŸeyi atla
                        return null;
                    }
                }).filter(item => item !== null); // null olanlarÄ± filtrele
            
                setAiPlan(parsedPlan);
            } else {
                setAiPlan([]);
            }

        } catch (error) {
            console.error("Hata:", error);
            alert("Bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin.");
        } finally {
            setLoading(false);
        }
    };

    const renderNutritionPlan = (plan) => {
        if (!plan || plan.length === 0) return <p>Beslenme planÄ± bulunamadÄ±.</p>;

        return (
            <div className="card mt-4 p-4 shadow">
                <h5>ðŸ“‹ Ã–nerilen Beslenme PlanÄ±</h5>
                <ul>
                    {plan.map((item, idx) => (
                        <li key={idx}>
                            <strong>{item.food}</strong> - Kalori: {item.calories} kcal, Karbonhidrat: {item.carbs}g, Protein: {item.protein}g, YaÄŸ: {item.fat}g
                        </li>
                    ))}
                </ul>
            </div>
        );
    };

    return (
        <div className="container py-5">
            <h3 className="text-center mb-4">Yapay Zeka Destekli Beslenme PlanÄ±</h3>

            <form onSubmit={handleGeneratePlan} className="card p-4 shadow">
                <div className="row">
                    <div className="col-md-4 mb-3">
                        <label className="form-label">Kilo (kg)</label>
                        <input type="number" className="form-control" value={weight} onChange={(e) => setWeight(e.target.value)} />
                    </div>
                    <div className="col-md-4 mb-3">
                        <label className="form-label">Boy (cm)</label>
                        <input type="number" className="form-control" value={height} onChange={(e) => setHeight(e.target.value)} />
                    </div>
                    <div className="col-md-4 mb-3">
                        <label className="form-label">YaÅŸ</label>
                        <input type="number" className="form-control" value={age} onChange={(e) => setAge(e.target.value)} />
                    </div>
                    <div className="col-md-6 mb-3">
                        <label className="form-label">Cinsiyet</label>
                        <select className="form-select" value={gender} onChange={(e) => setGender(e.target.value)}>
                            <option value="male">Erkek</option>
                            <option value="female">KadÄ±n</option>
                        </select>
                    </div>
                    <div className="col-md-6 mb-3">
                        <label className="form-label">Hedef</label>
                        <select className="form-select" value={goal} onChange={(e) => setGoal(e.target.value)}>
                            <option value="Maintain Weight">Korumak</option>
                            <option value="Weight Loss">Kilo Vermek</option>
                            <option value="Weight Gain">Kilo Almak</option>
                        </select>
                    </div>
                </div>

                <button type="submit" className="btn btn-primary w-100" disabled={loading}>
                    {loading ? "OluÅŸturuluyor..." : "Plan OluÅŸtur"}
                </button>
            </form>

            {renderNutritionPlan(aiPlan)}
        </div>
    );
}

export default NutritionPlanAI;
